name: Build Pet Clinic App
on:
  push:
    branches:
    - main
jobs:

    build-unittest-codeverage:
      runs-on: ubuntu-latest
      env:
        AZURE_WEBAPP_NAME: ${{secrets.AZ_WEBAPP_NAME}}
        AZURE_WEBAPP_PUBLISH_PROFILE: ${{secrets.AZ_WEBAPP_PUBLISH_PROFILE}}
        AZURE_WEBAPP_PACKAGE_PATH: ${{ github.workspace }}
        
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
            java-version: '11'
            distribution: 'adopt'
            
      - name: Maven clean
        run: ./mvnw clean
            
      - name: Build
        run: ./mvnw package

      - name: Unit Test
        run: ./mvnw test
      
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
            files: target/surefire-reports/*.xml
    
      - name: Sonar-cache packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Codecoverage
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Publish to artifactory
        uses: jfrog/setup-jfrog-cli@v1
      - run:  jfrog rt u  "./target/*.jar" petclinic --url https://sixartifacts.jfrog.io/artifactory/petclinic --apikey  ${{ secrets.JFROG_APIKEY }} 
      
#      - name: 'Deploy to Azure WebApp'
#        uses: azure/webapps-deploy@v2
#        with: 
#          app-name: ${{ env.AZURE_WEBAPP_NAME }}
#          publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
#          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/target/*.jar'
          
    deploy-integration-env:
      runs-on: ubuntu-latest
      needs: build-unittest-codeverage
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUB }}
        ARM_TENANT_ID: ${{ secrets.AZ_TENANT }}
        ARM_CLIENT_ID: ${{ secrets.AZ_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZ_SECRET }}
      steps:
      - uses: hashicorp/setup-terraform@v1
      - name: Clone Terraform Repo
        id: clone-ops
        uses: actions/checkout@v2        
        with:
          repository: 'rattisyam/iaac'
          ref: 'main'
          token: ${{ secrets.GITOPS_TOKEN }}

      - name: Execute Terraform Templates     
        run: |
          cd ./integration;
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve
    
    run-integration-test:
      runs-on: private-windows
      needs: deploy-integration-env
      steps:
      - name: Clone Selenium Tests
        id: clone-ops
        uses: actions/checkout@v2
        with:
          repository: 'rattisyam/spring-petclinic-selenium'
          ref: 'main'
          token: ${{ secrets.GITOPS_TOKEN }}

      - name: download artifact
        run: jfrog rt dl "petclinic/petclinic/*.jar" --sort-by=created --sort-order=desc --limit=1  --url https://sixartifacts.jfrog.io/artifactory --apikey ${{ secrets.JFROG_APIKEY }}

      - name: Deploy petclinic and test
        shell: powershell
        run: $file=Get-ChildItem -Path .\petclinic\ | select name -ExpandProperty Name;
            javaw -jar .\petclinic\$file;
            .\mvnw clean install;

    destroy-integration-env:
        runs-on: ubuntu-latest
        needs: [deploy-integration-env,run-integration-test]
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUB }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT }}
          ARM_CLIENT_ID: ${{ secrets.AZ_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZ_SECRET }}
        steps:
        - uses: hashicorp/setup-terraform@v1
        - name: Clone Terraform Repo
          id: clone-ops
          uses: actions/checkout@v2        
          with:
            repository: 'rattisyam/iaac'
            ref: 'main'
            token: ${{ secrets.GITOPS_TOKEN }}
        - name: Tear Down Integration Env    
          run: |
            cd ./integration;
            terraform init
            terraform validate
            terraform destroy -auto-approve

    run-jmeter-test:
        runs-on: ubuntu-latest
        #needs: run-integration-test
        env:
            JF_ARTIFACTORY_1: ${{ secrets.JFROG_JWT_TOKEN }}
        steps:
        - uses: actions/setup-java@v2
          with:
            java-version: '11'
            distribution: 'adopt'
        - uses: jfrog/setup-jfrog-cli@v1          
        - uses: actions/checkout@v2
          
        - run: |           
            jfrog rt dl "petclinic/petclinic/*.jar" --sort-by=created --sort-order=desc --limit=1 --url https://sixartifacts.jfrog.io/artifactory --apikey ${{ secrets.JFROG_APIKEY }}
               
        - name: Deploy petclinic and test       
          run: java -jar ./petclinic/*.jar &             
        
        - name: Jmeter Test
          uses: rbhadti94/apache-jmeter-action@v0.3.1
          with:
            testFilePath: src/test/jmeter/petclinic_test_plan.jmx
            outputReportsFolder: target/surefire-reports/jmeter.csv
     
        




